<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Pagamentos Pendentes - Sagrado Neon</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        body {
            display: flex;
            flex-direction: column;
        }

        .container {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid">
            <a href="telaInicial">
            <img src="/Logoextendido.png" width="150" height="40" alt="Logo">
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <div class="dropdown mt-3">
                        <a href="/calendario" class="btn btn-light btn-dark-mode" role="button">
                            <i class="bi bi-calendar4-event"></i>
                        </a>
                        <button id="toggleTheme" class="btn btn-light btn-dark-mode">
                            <i class="bi bi-moon-fill"></i>
                        </button>
                        <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown"
                            aria-expanded="false">
                            Menu
                        </button>
                         <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="cadastro">Adicionar Usuário</a></li>
                            <li><a class="dropdown-item" href="gerarRelatorios">Gerar Relatórios</a></li>
                            <li><a class="dropdown-item" href="cadastrarCliente">Gerar Contratos</a></li>
                            <li><a class="dropdown-item" href="editarDados">Editar Dados</a></li>
                            <li><a class="dropdown-item" href="produtos">Produtos</a></li>
                            <li><a class="dropdown-item" href="sair">Sair</a></li>
                        </ul>
                    </div>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container content-spacing flex-grow-1" style="background-color: rgb(49, 04, 59);">
        <h1 class="text-center mb-4" style="color: var(--text-color);">Contratos</h1>
        <div id="productCards"></div>
        <div class="text-center mt-4">
            <button id="atualizarContratos" class="btn btn-primary">Atualizar</button>
        </div>
    </div>

    <footer class="footer text-light text-center py-3">
        Todos os direitos reservados
    </footer>

    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const productCards = document.getElementById("productCards");
            const atualizarBtn = document.getElementById("atualizarContratos");

            let contratosData = [];

            async function carregarContratos() {
                try {
                    const response = await fetch('/auth/contratosPagamentos');
                    contratosData = await response.json();

                    if (!contratosData.length) {
                        productCards.innerHTML = "<p class='text-center'>Você não registrou nenhum contrato.</p>";
                    } else {
                        productCards.innerHTML = "";
                        contratosData.forEach(Contrato => {
                            const contractRow = document.createElement("div");
                            contractRow.className = "contract-row";
                            
                            // Exibe as informações do contrato
                            let contractHtml = `
                                <span>${Contrato.nomeDocumento}</span>
                                <span>Cliente: ${Contrato.nomeCliente || "Não encontrado"}<br>
                                Contato: ${Contrato.contatoCLiente || "Não encontrado"}</span>
                                <span><h3>Total: R$${Contrato.valor || "Indefinido"}</h3></span>
                                <span>Forma de Pagamento:<br>${Contrato.formaPagamento || "Indefinido"}</span>
                                <span><h3>Pago: <input class="form-check-input pago-checkbox" type="checkbox" 
                                data-id="${Contrato.id}" ${Contrato.pago ? "checked" : ""}></h3></span>
                            `;

                            // Exibe as parcelas do contrato se houver
                            if (Contrato.parcelas && Contrato.parcelas.length > 0) {
                                contractHtml += "<ul><h5>Parcelas:</h5>";
                                Contrato.parcelas.forEach(parcela => {
                                    const parcelaCheckbox = Contrato.formaPagamento === "Pix Parcelado"
                                        ? `<input class="form-check-input parcela-checkbox" type="checkbox" data-id="${parcela.id}" ${parcela.pago ? "checked" : ""}>`
                                        : "";
                                    contractHtml += `
                                        <li>
                                            <span>Valor: R$ ${parcela.valorParcela}</span><br>
                                            <span><strong> Pago: ${parcelaCheckbox}</strong></span><br>
                                            <span>Data de Pagamento: ${parcela.dataPagamento}</span><br><br>
                                        </li>
                                    `;
                                });
                                contractHtml += "</ul>";
                            } else if (Contrato.formaPagamento === "Pix Parcelado"){
                                contractHtml += "<ul><h5>Parcelas:</h5>Todas as parcelas foram pagas.</ul>";

                            }else {
                                contractHtml += `<span>Data de Pagamento: ${Contrato.dataPagamento || "Indefinido"}</span>`;
                            }

                            contractRow.innerHTML = contractHtml;
                            productCards.appendChild(contractRow);
                        });
                    }
                } catch (error) {
                    console.error("Erro ao carregar contratos:", error);
                    productCards.innerHTML = "<p class='text-center'>Erro ao carregar contratos.</p>";
                }
            }

            atualizarBtn.addEventListener("click", async () => {
                const contratosCheckboxes = document.querySelectorAll(".pago-checkbox");
                const parcelasCheckboxes = document.querySelectorAll(".parcela-checkbox");

                const atualizacoesContratos = [];
                const atualizacoesParcelas = [];

                // Verifica se o contrato foi marcado como pago
                contratosCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        const contratoId = checkbox.dataset.id;
                        atualizacoesContratos.push({ id: contratoId, pago: true });
                    }
                });

                // Verifica as parcelas
                parcelasCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        const parcelaId = checkbox.dataset.id;
                        atualizacoesParcelas.push({ id: parcelaId, pago: true });
                    }
                });

                try {
                    const response = await fetch('/auth/atualizarPagamentos', {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ contratos: atualizacoesContratos, parcelas: atualizacoesParcelas }),
                    });

                    if (response.ok) {
                        alert("Contratos e parcelas atualizados com sucesso!");
                        await carregarContratos();
                    } else {
                        alert("Erro ao atualizar contratos e parcelas.");
                    }
                } catch (error) {
                    console.error("Erro ao atualizar contratos e parcelas:", error);
                    alert("Erro ao atualizar contratos e parcelas.");
                }
            });

            await carregarContratos();
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/themeSwitcher.js"></script>
</body>

</html>